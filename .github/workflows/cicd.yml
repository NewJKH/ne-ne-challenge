name: CI/CD Docker to EC2

on:
  push:
    branches: [ "dev", "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build without Test
        run: ./gradlew build -x test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/my-spring-app:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/my-app

            # 현재 활성 포트 읽기
            ACTIVE_PORT=$(grep -oP 'server 127.0.0.1:\K[0-9]+' /etc/nginx/routes/active_upstream.include || echo "8080")

            # 비활성 포트 결정
            if [ "$ACTIVE_PORT" = "8080" ]; then
              APP_PORT=8081
              COMPOSE_FILE=docker-compose.green.yml
            else
              APP_PORT=8080
              COMPOSE_FILE=docker-compose.blue.yml
            fi

            echo "배포 대상 포트: $APP_PORT"

            # .env 생성
            cat > .env <<EOF
            PROJECT_NAME=${PROJECT_NAME}
            APP_PORT=${APP_PORT}
            SPRING_PROFILES_ACTIVE=prod
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            DB_NAME=mydb
            DB_URL=${{ secrets.DB_URL }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            SPRING_REDIS_HOST=redis
            SPRING_REDIS_PORT=6379
            TOSS_SECRET_KEY=${{ secrets.TOSS_SECRET_KEY }}
            TOSS_CLIENT_KEY=${{ secrets.TOSS_CLIENT_KEY }}
            TOSS_BASE_URL=${{ secrets.TOSS_BASE_URL }}
            KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}
            KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }}
            NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}
            NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}
            EOF
            
            # 비활성 슬롯에만 pull & up
            docker-compose -p ${PROJECT_NAME}-${APP_PORT} -f $COMPOSE_FILE pull app
            docker-compose -p ${PROJECT_NAME}-${APP_PORT} -f $COMPOSE_FILE up -d app
            
            echo "Waiting for ${PROJECT_NAME} (${APP_PORT}) to be healthy..."
            for i in {1..30}; do
            if docker inspect --format='{{json .State.Health.Status}}' ${PROJECT_NAME}-app | grep -q "healthy"; then
            echo "${PROJECT_NAME} (${APP_PORT}) is healthy!"
            break
            fi
            sleep 3
            done
            
            # Nginx 활성 포트 변경
            echo "server 127.0.0.1:${APP_PORT};" | sudo tee /etc/nginx/routes/active_upstream.include
            sudo nginx -t && sudo nginx -s reload
            
            # 이전 슬롯 유지 (원하면 수동 종료)
            docker-compose ps
            
