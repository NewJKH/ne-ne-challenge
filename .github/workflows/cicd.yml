name: CI/CD Docker to EC2

on:
  push:
    branches: [ "dev", "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build without Test
        run: ./gradlew build -x test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/my-spring-app:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/my-app

            # 환경변수 파일 생성
            {
              echo "PROJECT_NAME=$PROJECT_NAME"
              echo "APP_PORT=$APP_PORT"
              echo "SPRING_PROFILES_ACTIVE=prod"
              echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}"
              echo "DB_NAME=mydb"
              echo "DB_URL=${{ secrets.DB_URL }}"
              echo "DB_USERNAME=${{ secrets.DB_USERNAME }}"
              echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}"
              echo "SECRET_KEY=${{ secrets.SECRET_KEY }}"
              echo "SPRING_REDIS_HOST=redis"
              echo "SPRING_REDIS_PORT=6379"
              echo "TOSS_SECRET_KEY=${{ secrets.TOSS_SECRET_KEY }}"
              echo "TOSS_CLIENT_KEY=${{ secrets.TOSS_CLIENT_KEY }}"
              echo "TOSS_BASE_URL=${{ secrets.TOSS_BASE_URL }}"
              echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}"
              echo "KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }}"
              echo "NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}"
              echo "NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}"
            } > .env

            # 테스트 슬롯(8081) 또는 운영 슬롯(8080)에 배포
            docker-compose -p ${PROJECT_NAME} pull app
            docker-compose -p ${PROJECT_NAME} up -d app

            # 헬스체크 (30초 대기)
            echo "Waiting for ${PROJECT_NAME} to be healthy..."
            for i in {1..30}; do
              STATUS=$(docker inspect --format='{{json .State.Health.Status}}' ${PROJECT_NAME}-app || echo "")
              if echo "$STATUS" | grep -q "healthy"; then
                echo "${PROJECT_NAME} is healthy!"
                break
              fi
              sleep 3
            done

            echo "배포 완료: ${PROJECT_NAME} (Port: ${APP_PORT})"
            echo "Nginx 전환은 수동으로 실행하세요."
          
