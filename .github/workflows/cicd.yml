name: CI/CD Docker to EC2

on:
  push:
    branches: [ "dev" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build without Test
        run: ./gradlew build -x test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/my-spring-app:latest

      - name: Deploy Green to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/my-app

            echo "PROJECT_NAME=app-green" > .env
            echo "APP_PORT=8081" >> .env
            echo "SPRING_PROFILES_ACTIVE=prod" >> .env
            echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> .env
            echo "DB_NAME=mydb" >> .env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
            echo "SPRING_REDIS_HOST=redis" >> .env
            echo "SPRING_REDIS_PORT=6379" >> .env
            echo "TOSS_SECRET_KEY=${{ secrets.TOSS_SECRET_KEY }}" >> .env
            echo "TOSS_CLIENT_KEY=${{ secrets.TOSS_CLIENT_KEY }}" >> .env
            echo "TOSS_BASE_URL=${{ secrets.TOSS_BASE_URL }}" >> .env
            echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" >> .env
            echo "KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }}" >> .env
            echo "NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}" >> .env
            echo "NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}" >> .env

            docker ps -a -q --filter "name=app-green-app" | grep -q . && docker rm -f app-green-app || true
            docker ps -q --filter "name=mysql" | grep -q . && docker stop mysql && docker rm mysql || true
            docker ps -q --filter "name=redis" | grep -q . && docker stop redis && docker rm redis || true
            
            docker-compose -p app-green pull app
            docker-compose -p app-green up -d app
            
            for i in {1..30}; do
            if curl -fsS http://127.0.0.1:8081/actuator/health | grep -q '"status":"UP"'; then
            echo "Green is UP"
            break
            fi
            echo "Waiting for Green..."
            sleep 3
            done
            
            echo "server 127.0.0.1:8081;" | sudo tee /etc/nginx/routes/active_upstream.include
            sudo nginx -t && sudo nginx -s reload
            
            docker-compose -p app-blue down || true
          
