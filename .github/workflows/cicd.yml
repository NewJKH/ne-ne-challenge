name: CI/CD Docker to EC2

on:
  push:
    branches: [ "dev", "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build without Test
        run: ./gradlew build -x test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/my-spring-app:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/my-app

            echo "PROJECT_NAME=$PROJECT_NAME" > .env
            echo "APP_PORT=$APP_PORT" >> .env
            
            echo "SPRING_PROFILES_ACTIVE=prod" >> .env
            echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> .env
            echo "DB_NAME=mydb" >> .env
            echo "DB_URL=${{ secrets.DB_URL }}" >> .env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
            echo "SPRING_REDIS_HOST=redis" >> .env
            echo "SPRING_REDIS_PORT=6379" >> .env
            echo "TOSS_SECRET_KEY=${{ secrets.TOSS_SECRET_KEY }}" >> .env
            echo "TOSS_CLIENT_KEY=${{ secrets.TOSS_CLIENT_KEY }}" >> .env
            echo "TOSS_BASE_URL=${{ secrets.TOSS_BASE_URL }}" >> .env
            echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" >> .env
            echo "KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }}" >> .env
            echo "NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}" >> .env
            echo "NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}" >> .env

            docker-compose -p ${PROJECT_NAME} pull app
            docker-compose -p ${PROJECT_NAME} up -d app

            echo "Waiting for ${PROJECT_NAME} to be healthy..."
            for i in {1..30}; do
              if docker inspect --format='{{json .State.Health.Status}}' ${PROJECT_NAME}-app | grep -q "healthy"; then
                echo "${PROJECT_NAME} is healthy!"
                break
              fi
              sleep 3
            done

            echo "server 127.0.0.1:${APP_PORT};" | sudo tee /etc/nginx/routes/active_upstream.include
            sudo nginx -t && sudo nginx -s reload

            if [ "${PROJECT_NAME}" = "app-green" ]; then
              docker-compose -p app-blue down || true
            else
              docker-compose -p app-green down || true
            fi
