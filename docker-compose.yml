services:
  app:
    image: ${DOCKERHUB_USERNAME}/my-spring-app:latest
    container_name: my-app
    ports:
      - "8080:8080"
    depends_on:
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SPRING_DATASOURCE_URL: ${DB_URL}
      SPRING_DATASOURCE_USERNAME: ${DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      TOSS_SECRET_KEY: ${TOSS_SECRET_KEY}
      TOSS_CLIENT_KEY: ${TOSS_CLIENT_KEY}
      TOSS_BASE_URL: ${TOSS_BASE_URL}
      KAKAO_CLIENT_ID: ${KAKAO_CLIENT_ID}
      KAKAO_REDIRECT_URI: ${KAKAO_REDIRECT_URI}
      NAVER_CLIENT_ID: ${NAVER_CLIENT_ID}
      NAVER_CLIENT_SECRET: ${NAVER_CLIENT_SECRET}
      # ES 연결은 외부 실행 컨테이너 기준 (별도 compose에서 관리)
      SPRING_ELASTICSEARCH_URIS: http://elasticsearch:9200
    volumes:
      - ./firebase-key.json:/app/firebase/firebase-key.json
    networks:
      - app-network
      - search   # 외부 elasticsearch와 연결할 네트워크 (external)

  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - app-network

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - monitoring

volumes:
  redis-data:
  grafana_data:

networks:
  app-network:
    driver: bridge
  monitoring:
    driver: bridge
  search:
    external: true   # ES/Kibana용 compose에서 생성
